import Foundation

enum Platform: String {
    case ios = "iOS"
    case android = "Android"
    case web = "Web"
}

protocol CodeWriting {
    var time: String { get }
    var codeAmount: Int { get }
    func writeCode(platform: Platform, numberOfSpecialist: Int)
}

protocol CodeStopping {
    var stopTime: String { get }
    var testedCodeAmount: Int { get }
    func stopCoding()
}

class Company: CodeWriting, CodeStopping {
    var numberOfProgrammers: Int
    var specializations: [String]
    var startTime: Date?

    init(numberOfProgrammers: Int, specializations: [String]) {
        self.numberOfProgrammers = numberOfProgrammers
        self.specializations = specializations
        self.startTime = Date()
    }

    var time: String {
        return "2024-02-23"
    }

    var codeAmount: Int {
        return 1000
    }

    func writeCode(platform: Platform, numberOfSpecialist: Int) {
        print("Разработка началась. Пишем код \(platform.rawValue) для \(numberOfSpecialist) специалистов")
    }

    var stopTime: String {
        return "2024-02-24"
    }

    var testedCodeAmount: Int {
        return 800
    }

    func stopCoding() {
        guard let startTime = self.startTime else {
            print("Ошибка: время начала программирования не установлено.")
            return
        }

        let randomTimeInSeconds = Double.random(in: 0...100000 * 24 * 60 * 60)
        let endTime = startTime.addingTimeInterval(randomTimeInSeconds)
        let timeDifferenceInSeconds = endTime.timeIntervalSince(startTime)
        let timeDifferenceInDays = timeDifferenceInSeconds / (60 * 60 * 24)

        let roundedTimeDifferenceInDays = timeDifferenceInDays.rounded()

        print("Работа закончена. Сдаю в тестирование. Затраченное время: \(roundedTimeDifferenceInDays) часов")
    }
}

let myCompany = Company(numberOfProgrammers: 50, specializations: ["ios", "android", "web"])
myCompany.writeCode(platform: .ios, numberOfSpecialist: 20)
myCompany.stopCoding()
